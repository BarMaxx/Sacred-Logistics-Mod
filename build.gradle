plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "org.jetbrains.kotlin.jvm" version "2.0.0"
}


group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    implementation.extendsFrom(library)
    library.extendsFrom(shade)
}

repositories {
    flatDir {
        dirs 'mods'
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (file("mods").exists()) {
        file("mods").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            def modreference = "lib:$modartifact:$modversion"

            dependencies {
                implementation fg.deobf(project.dependencies.create(modreference) {
                    transitive = false
                })
            }
        }
    }

    implementation 'thedarkcolour:kotlinforforge:3.12.0'

    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")
}

mixin {
    add sourceSets.main, "sacredlogistics.refmap.json"
    config "sacredlogistics.mixins.json"

    debug = true
    debug.verbose = true
    debug.countInjections = true
    debug.export = true
    checks.interfaces = true
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    archiveClassifier.set("dev")
    from sourceSets.main.output
    exclude '**/module-info.class'

    from { configurations.shade.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

shadowJar {
    configurations = [project.configurations.shade]
    archiveClassifier.set("")

    def shadowPackages = [
            'kotlin',
            'org.intellij',
            'org.jetbrains'
    ]

    shadowPackages.forEach {
        relocate(it, "sacred_repack.$it")
    }

    mergeServiceFiles()
    exclude '**/module-info.class'
    finalizedBy('reobfShadowJar')
}

reobf {
    jar {}
    shadowJar {}
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
